2、拓展表方式

    1、表增加拓展字段，用json 的Key Value 方式存储对象 ，不用来一个方式加一个字段
        --这种方式 存储不能走索引，对于需要搜索数据来数据来说比较尴尬

        优点：
            可以随时动态扩展属性
            新旧两种数据可以同时存在
            迁移数据方便

        缺点：
            ext里的字段无法建立索引  --存储ES 解决
            ext里面的字段太过开放，导致多个业务合并的时候这些数据会大量冗余，
                例如：
                    业务A：ext:{"name":"liupengming","age":66}
                    业务B：ext:{"school":"hangzhou","class":4}
                    如果AB业务合并之后，则ext字段为{"school":"hangzhou","class":4,"name":"lisa","age":66}）
                    最终的结果就是A业务本来不用关心school、class等属性，但是他在序列化的时候还是需要这些字段，导致最终入库的时候数据冗余了

        --解决方案
            1、按照业务身份建立业务模型（代码）
            2、另外还可以通过数据库设计的时候增加业务身边编码解决

        举个例子：
            业务A，code 1001  ext:{"name":"lilei","age":16}
            业务B，code 1002  ext:{"school":"hangzhou","class":4,"name":"hanmeimei","age":15}

        本来一条记录很多属性，会变成多条记录，行数会增加很多（可以接受）


    2、通过增加拓展表的方式扩展，拓展表预留多个字段（具体多少待确认），跟主表的方式直接 进行通过主键进行关联

        设计场景：
            可变动字段不多的情况下，能够遇见业务的场景不多

        横向拓展：

        优点：
            商品拓展字段不用去基础信息表去改动，比如增加一个字段，尽量保证基础表（主表的）的稳定
        缺点：
            不知道字段预留多少合适，



   3、横向拓展表结构 （id，type，code，value）横向表拓展表 货品中心采用这中结构的方式进行拓展

        type 业务域
        code,value 属性名字，属性值的方式进行拓展

        优点：
            灵活拓展
        缺点：
            属性是行的维度，需要转换成java对象的方式（列的维度），需要写解析的代码
            搜索的困难

        解决办法：
            这个可以加多一个中间表


        商品表，保存商品基本信息、商品名称、商品编码...
        商品属性表，属性名、属性值...

        商品--属性中间表，保存商品-属性关联关系;
        再有就是尽量保证SQL语句的简洁性;


------------------------------------------------------------------------------------------------------------------------
啥，又要为表增加一列属性？               https://mp.weixin.qq.com/s/HmTbhqS1QCAuPYrccdpwZw
这才是真正的表扩展方案                  https://mp.weixin.qq.com/s/JJjLgNX3ZawwWkguP5iHVA
100亿数据1万属性数据架构设计            https://mp.weixin.qq.com/s/3O3kPSwV-tAeYdy2ZRACpg







------------------------------------------------------------------------------------------------------------------------
                                                                        https://time.geekbang.org/column/article/160321
------------------------------------------------------------------------------------------------------------------------
我们的售货机系统是每天有几个时间段请求会成倍的增加。像每天中午11点-12点半。晚上的5点半到6点还有晚上21点到24点。
这几个时间段的订单量是比较大的。

我们第一次碰到的问题是机器代理商反馈有客户购买了，但是出货很慢。并且还发现了系统出现了大量的订单退款。我们开始从日志方面看，发现了好像系统的处理速度变慢了。并且这些退款的订单都是出货了的。这样的话，系统就亏大了。并且随着高峰的到来，系统开始报mysql的连接数用完了。导致数据库写入和更新操作都没法做。我们立刻把生产系统停掉。老板也是致电我们，搞不好就滚蛋。然后我们连夜对机器下单这块的业务做优化, 减少访问mysql的压力。并且把消息处理类中用到的连接池的大小给扩大一倍。
就这样消停了几天。

但是由于系统内设备不断增加，隔了大概一周左右，晚上10点左右又来投诉说这个问题，我们犹如惊弓之鸟，立马打开日志查看。还是这个问题。

而且以前忽略了微信的支付回调如果处理不及时，微信会向回调地址重复发送订单结果的通知。这个是导致系统崩盘的重要的点之一。

关键这次发现了最重要的问题：系统在处理终端设备订单的微信支付宝的回调在做异步处理的时候，由于回调部分没有做并发处理。
导致数据库的表被锁住，引发的回调部分业务要处理堆积，系统处理不过来。恶性循环，消息越多，越处理不过来。越处理不过来，支付回调部分越堆积。导致我们的机器又出货，又退款。

最终我们花了一夜时间把微信支付回调做了多线程处理。系统才稳定了下来。

第二天把支付宝的回调处理部分也做了多线程处理。一段时间内没有问题。

现在系统加了redis做缓存。但是缓存刚上线也是有不少问题的。但是我们慢慢解决了。

目前的系统算是比较稳定了。

阿里云的双核4G服务器 支撑我们系统的600多台设备。

------------------------------------------------------------------------------------------------------------------------
这讲内容相当实用，检讨了一下之前我们遇到的一个live site issue，
重新复盘了一下，我们系统在AWS上部署，一个新业务需要用到SQS(AWS的简单消息对列服务)
上线之前我测试了所有case万无一失，刚上线也非常顺利，
但是我们系统每小时会有一个调用峰值，就在第一个峰值上系统飘红，下游系统无流量

通过下游没有流量，初步判断问题是在我们的service中，打开日志发现AWS client抛了大量异常，异常内容是too many visible message
排查代码发现是在使用AWS SQS client时候为了加快消费速度，开了10个线程来消费队列，SQS的message有一个中间状态叫invisible
当时这个状态过期时间是10分钟(SQS最大值)，而十个线程在处理低流量请求时不会有问题
高流量时会迅速让invisible数量上升到SQS上线，后续的任何操作都会抛异常

当时的处理方式是在线程处理是增加个sleep拖慢处理速度，但是本来就是为了加快处理开了这麽多线程，这样做就没意义

学完今天的课程，我回头看了一下AWS的源码
    发现AWS client在调用SQS时就是单纯的发request，而标记invisible的动作应该是在server端
    因此client不能感知sever端invisible已经上限了，而我们代码使用long polling不断的调用client
    client在处理完删除message时候也有一个异步时间差，这就导致invisible数量快速累积

其实目前线上的解决方案在更大流量情况下还是可能导致同样问题（大流量导致处理事件比sleep时间长）




------------------------------------------------------------------------------------------------------------------------
那个JIT预热的能给个思路么，是你们自己写的脚本、还是采用的第三方框架？

    因为用的是容器，所以改了nginx ingress controller，动态修改权重
------------------------------------------------------------------------------------------------------------------------

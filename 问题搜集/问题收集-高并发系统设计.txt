========================================================================================================================
基础
========================================================================================================================



========================================================================================================================
数据库
========================================================================================================================



------------------------------------------------------------------------------------------------------------------------
NoSQL
------------------------------------------------------------------------------------------------------------------------
之前单表热点数据接近亿级，查询时间达到了8秒左右

    后来进行了分表，按照ID取模分了一百张表，历史数据取模插入到分表中
    新建了一张表用来保存全局唯一ID，每次新建热点都会更新全局唯一ID，保证分表之后ID唯一性

    查询使用es
    GitHub上找了一个开源的MySQL数据同步到es的工具，模拟的从库，保证了数据同步的实时性

    热点数据查询性能降低到了1秒内
    性能得到很大提升

------------------------------------------------------------------------------------------------------------------------
业务中有个模块写极多读少，这种情况下是不是直接把这个数据拆分出来用单独nosql存储比较好？还是先写到nosql，再慢写到mysql好？
如果慢写到mysql
一是可能会出现数据不一致问题，
二是写请求会积累很多，内存型nosql支撑不住，可能要用leveldb之类的，磁盘多了一份数据，等要迁移的时候又增加了运维管理成本

    如果是长期都是写多读少，那么可以考虑nosql
    如果是瞬时峰值的话，还是用消息队列削峰填谷


------------------------------------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------------------------------------








========================================================================================================================
缓存
========================================================================================================================

------------------------------------------------------------------------------------------------------------------------
数据查询瓶颈
------------------------------------------------------------------------------------------------------------------------

缓存目前是标配之一（互联网开发三剑客：RPC/MQ/REDIS），凡是需要提速的地方，也许缓存就能排上用场，至少缓存的思想必然会被用上。

好处：服务提速
坏处：数据不一致风险，引入复杂度。

        原则，简单优先，能不用就不用，实在不行就需要好好考虑一番了

        缓存穿透怎么解决？缓存击穿怎么解决？缓存雪崩怎么解决？
        数据不一致性问题怎么解决？数据结构众多怎么选择合适的数据结构？
        缓存的key：value怎么设计？缓存怎么加载？过期时间怎么设置？补偿机制怎么设计？
        缓存具体选择什么方案？需不需要多层缓存？多层缓存的复杂度怎么控制？

    不过这些对于面试用处不大，面试会问各种底层结构？以及怎么优化的？怎么选择某种数据结构的？所有的一切，都是为了高性能而存在。


    是的
    缓存使用简单，但是深入难

------------------------------------------------------------------------------------------------------------------------
没有达到需要引用缓存需要的情况下，尽量不要过早使用缓存。
    缓存的坑很多，并且维护成本极高。在处理缓存的适合需要多考虑很多问题。

曾经碰到这样的情况：
    调用别人写的查询服务，但是查找到的数据却迟迟无法更新为最新数据。最后，重新写了直接查库的接口，才解决问题。

并且，缓存如果频繁更新，频繁失效 反而会带来性能的消耗。

再带上杨晓峰老师的一句话：“过早的优化是万恶之源"


    是的

------------------------------------------------------------------------------------------------------------------------
方便面那个比喻好评
缓存和缓冲区对应的英语是cache和buffer

    buffer的存在  ->  是为了解决 数据不能一次性读写完成，或某次的数据量太小 io成本又太高， 的折中方案


------------------------------------------------------------------------------------------------------------------------
老师，热点本地缓存使用组件 Guava Cache ，这个东西能存多大量呢，感觉像一个数据库

    guava cache本身没有限制，注意看存大量是否对gc有影响

------------------------------------------------------------------------------------------------------------------------
像股票之类的app页面数据实时刷新，这个是怎么做到的，是否用了缓存如何使用的缓存呢，希望老师能给解答，谢谢~


    股票的话，应该有分布式缓存，但是这个缓存更新频率高，需要用队列削峰填谷

    还有一点：

        相对来说，股票数量级  ->    是非常非常小  且固定的          // A股 4000只    美股 7000只


------------------------------------------------------------------------------------------------------------------------
热点缓存是存在本地内存之中吗
后台的列表数据有很多查询条件还有分页这种，能用缓存吗，如果能用，有什么好的缓存方案吗

    有做过这种keylist的存储
    一般要么缓存整体，要么缓存前几页的热点数据




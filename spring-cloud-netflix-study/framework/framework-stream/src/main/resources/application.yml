server:
  port: 2203

spring:
  profiles: dev

  application:
    name: service-mq-stream
  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      url: jdbc:mysql://47.97.112.202:3307/sc_user?useUnicode=true&characterEncoding=utf-8
      username: yunche
      password: yc_123
      max-wait: 10000
      initialSize: 8
      min-idle: 0
      max-active: 20
      test-on-borrow: true

  redis:
#    host: 47.97.112.202
    host: 127.0.0.1
    port: 6379
#    password: yunche@1234
    timeout: 3000
    lettuce:
      pool:
        max-active: 200
        max-idle: 50
        min-idle: 24
        max-wait: 2000


  cloud:
     stream:
        kafka:
          binder:
#            brokers: 47.97.122.31:9092
#            brokers: 127.0.0.1:9092,172.16.186.97:9092
            brokers: 127.0.0.1:9092
#            brokers: 172.16.186.97:9092
#            brokers: 47.97.217.33:9092
#            auto-add-partitions: true
#            auto-create-topics: true
#            min-partition-count: 1
        bindings:
          # 配置自己定义的通道与哪个中间件交互
          # 生产者配置A
          my_output_1:
            destination: topic_1
#            content-type: application/json;charset=UTF-8
#            producer:
#              partitionCount: 1
          # 消费者配置A
          my_input_1:
            destination: topic_1
#            group: group-1
#            consumer:
#              autoCommitOffset: false
#              concurrency: 1
#              partitioned: false
#               # 消费重试（默认：3次）
#              max-attempts: 3
          # 生产者配置B
          my_output_2:
            destination: topic_2
#            content-type: application/json;charset=UTF-8
#            producer:
#              partitionCount: 1
          # 消费者配置B
          my_input_2:
            destination: topic_2
#            group: group-1
#            consumer:
#              autoCommitOffset: false
#              concurrency: 1
#              partitioned: false

        # 默认的binder是kafka
        default-binder: kafka

dubbo:
  application:
    name: service-mq-stream
  registry:
    address: zookeeper://127.0.0.1:2181
  protocol:
    name: dubbo
    port: 28201
  provider:
    group: yunche
    version: 1.0.0


eureka:
  client:
    registerWithEureka: true # 服务注册开关
    fetchRegistry: true      # 服务发现开关
    serviceUrl:              # Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:50101/eureka/,http://localhost:50102/eureka/}
  instance:
    health-check-url-path: /actuator/health
    prefer-ip-address:  true  # 将自己的ip地址注册到Eureka服务中
    ip-address: ${IP_ADDRESS:127.0.0.1}
    instance-id: ${spring.application.name}:${server.port} # 指定实例id
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间
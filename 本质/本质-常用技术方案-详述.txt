1、缓存

    缓存不仅仅是一种组件的名字，更是一种设计思想

        你可以认为 任何能够加速读请求 的组件和设计方案，都是缓存思想的体现。


    而这种加速通常是通过两种方式来实现：

        1、使用更快的介质，比如 内存

        2、缓存复杂运算的结果，比方说前面 TLB 的例子就是缓存地址转换的结果




2、WAL                       // 预写式日志（Write Ahead Log, WAL）

    预写式日志
        在计算机科学中，预写式日志（Write-ahead logging，缩写 WAL）是关系数据库系统中

        用于提供 原子性和持久性（ACID属性中的两个）的一系列技术

        ARIES是WAL系列技术常用的算法，在文件系统中，WAL通常称为journaling


    核心思想
        在使用WAL的系统中，所有的修改在提交之前都要先写入log文件中

        log文件中通常包括redo和undo信息

        通过日志记录描述好数据的改变后(redo和undo)，再写入缓存，等缓存区写满后，最后再往持久层修改数据


    目的
        在硬盘数据不损坏的情况下，预写式日志允许存储系统在崩溃后能够在日志的指导下恢复到崩溃前的状态，避免数据丢失

        可以为非内存型数据提升极高的效率，而且保证了数据的完整性。

            可以通过一个例子来说明：

                假设一个程序在执行某些操作的过程中机器掉电了，在重新启动时，程序可能需要知道当时执行的操作是成功了还是部分成功或者是失败了

                如果使用了WAL，程序就可以检查log文件，并对突然掉电时计划执行的操作内容跟实际上执行的操作内容进行比较

                在这个比较的基础上，程序就可以决定是撤销已做的操作还是继续完成已做的操作，或者是保持原样

    WAL实现方式
        WAL允许用in-place方式更新数据库，用in-place方式做更新的主要优点是减少索引和块列表的修改

        另一种用来实现原子更新的方法是shadow paging，它并不是in-place方式



3、找规律

    一切的一切
    不过是找规律
    然后再逐步验证、逐步完善
    提升胜率



1、数据结构

    String              K-V                                          ->  缓存、计数器、分布式锁、分布式session

    Hash                对象Map                                      ->  对象数据、缓存

    List                双端链表    有序                             ->  栈、队列、MQ

    Set                 去重        无序                             ->  去重、交集、并集、diff

    Sorted Set          去重        有序集合（分数）                  ->  排行榜


2、过期策略

    定期删除

        每100ms  ->   随机抽取 部分设置TTL的key    ->    check TTL

    惰性删除

        访问key   ->  check  ->   是否设置了TTL  +  是否已过期


3、内存淘汰机制

    no-enviction        不淘汰，新写入报错                               // 默认策略

    allkeys-lru         最近最少使用的 key                               // 最常用
    volatile-lru        最近最少使用的 TTL key

    allkeys-lfu         使用频率最低的 key
    volatile-lfu        使用频率最低的 TTK key

    allkeys-random      随机移除某个 key
    volatile-random     随机移除某个 TTL key

    volatile-ttl        TTL将要过期的 key


4、LRU算法

    简易LRU

        1、链表

        2、最新访问的数据  ->  放入链表头


    变体  ==>  分区  ->  young  +  old

        1、新加载的数据  ->  放入old

        2、old区存活1s以上  +  再次访问   ->      才放入 young区头部


5、持久化

    RDB     周期性的持久化            ->   默认：每5min刷盘一次        // 快照 + 异步刷盘

    AOF     对每条写入命令作为日志    ->   写入log文件                 // 每隔1s ->  异步fsync


    应用：

        RDB + AOF

            RDB  ->  冷备份   =>   AOF损坏的时候 -> 用RDB恢复

            AOF  ->  保证数据不丢失，作为数据恢复的第一选择



6、缓存


7、缓存雪崩、缓存穿透、缓存击穿


8、缓存与数据库 的双写一致性

    1、更新DB

    2、删除cache


    最最安全的  ==>  分布式锁    ->      低性能


9、并发竞争

    多客户端请求  ->    并发竞争   ->    顺序性问题、原子性问题


        1、zk分布式锁

        2、乐观锁

            更新DB缓存

                1、Mysql加时间戳字段

                2、查数据 -> 也查出 时间戳字段

                3、更新cache  =>  check比较   ->   cache数据 和 DB数据  时间戳大小     =>  DB时间戳大 -> 更新覆盖




10、高并发、高可用



11、主从架构


12、哨兵


12、集群



14、部署
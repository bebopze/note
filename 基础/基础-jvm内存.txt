========================================================================================================================
堆与栈                                 // 栈 ->  运行逻辑               堆 -> 共享内存（数据存储）
========================================================================================================================

堆与栈：

    栈   ->   运行时的单位

    堆   ->   存储的单位



堆栈分离：                           // 栈中 也可以 存储数据，为什么要把 堆和栈 区分出来？

    1、分治思想

        从软件设计的角度看：

            栈   ->   代表了   处理逻辑
            堆   ->   代表了   数据


        这样分开，使得处理逻辑更为清晰。

        分而治之 的思想

            这种隔离、模块化的思想在软件设计的方方面面都有体现


    2、共享

        堆中的内容  ->   可以被 多个栈(线程)共享         // 也可以理解为多个线程访问同一个对象

            1、这种共享提供了一种有效的     ->     数据交互方式（如：共享内存）

            2、堆中的 共享常量 和 缓存      ->    可以被所有栈访问，节省了空间


    3、动态增长

        栈因为运行时的需要，比如保存系统运行的上下文，需要进行地址段的划分

        由于栈只能向上增长，因此就会限制住栈存储内容的能力。

        而堆不同，堆中的对象是可以根据需要动态增长的，因此栈和堆的拆分，使得动态增长成为可能，相应栈中只需记录堆中的一个地址即可


    4、面向对象

        面向对象 就是堆和栈的完美结合

            其实，面向对象方式的程序与以前结构化的程序在执行上没有任何区别。
            但是，面向对象的引入，使得对待问题的思考方式发生了改变，而更接近于自然方式的思考。

        当我们把对象拆开，你会发现

            1、对象的属性其实就是数据，存放在堆中；

            2、而对象的行为（方法），就是运行逻辑，放在栈中。

        我们在编写对象的时候，其实即编写了数据结构，也编写的处理数据的逻辑。不得不承认，面向对象的设计，确实很美。





========================================================================================================================
堆中存什么？栈中存什么？
========================================================================================================================

存的什么：

    堆中存的是     ->     对象

    栈中存的是     ->     基本数据类型  和  堆中对象的引用


堆栈分离的好处：

    一个对象的大小是不可估计的，或者说是可以动态变化的

    但是在栈中，一个对象只对应了一个 4byte 的引用



为什么不把  基本类型  放堆中：

    1、需要空间比较少

        因为其占用的空间一般是 1~8个字节

    2、长度固定

        基本类型   ->   不会出现 动态增长的情况，长度固定    ->   因此 栈中存储 就够了

                       如果 把它存在堆中 是没有什么意义的    ->  还会浪费空间

    --------------------------------------------------
    可以这么说

        基本类型 和 对象的引用 都是存放在 栈中

        而且都是 几个字节的一个数

        因此在程序运行时，他们的处理方式是统一的

    --------------------------------------------------
    但是 基本类型、对象引用  和  对象本身  就有所区别了

        基本类型、对象引用       ->     栈 中的数据

        对象本身                ->     堆 中的数据

        ---------------------------------------------
        最常见  ->  Java中 参数传递 时的问题

            调用者     ->      传入的参数为   对象引用
            执行者     ->      使用的是       对象本身



对比：

    1、堆和栈中，栈是  ->  程序运行 最根本的东西

        程序运行   ->   可以没有堆，但是 不能没有栈

    2、堆是为栈  进行 数据存储服务                           // 本质上 堆是栈的 存储介质

        说白了，  堆  ->  就是一块共享的内存

    3、正是因为 堆和栈的 分离思想

        才使得  Java的垃圾回收  成为可能


========================================================================================================================
数据类型
========================================================================================================================


数据类型

    Java虚拟机中，数据类型可以分为两类：

        1、基本类型

            基本类型的变量   保存 原始值            // 即：他代表的值就是 数值本身


        2、引用类型

            引用类型的变量   保存 引用值           // “引用值”代表了 某个对象的引用（地址），而不是对象本身


基本类型包括：

    byte、short、int、long、char、float、double、boolean

    returnAddress

引用类型包括：

    类、接口、数组


========================================================================================================================

========================================================================================================================



========================================================================================================================

========================================================================================================================




========================================================================================================================

========================================================================================================================




========================================================================================================================

========================================================================================================================

1、AOP 拦截

    1、拦截

        拦截类型：

            1、注解

                @Around("@annotation(com.bebopze.framework.common.annotation.Limiter)")

            2、类路径匹配

                @Around(value = "execution(* com.bebopze..*..*.controller..*.*(..))")



        不支持：

            1、final  的拦截

            2、static 的拦截


        Spring AOP 是基于 cglib 的，基于 继承 的方式实现的：

            被 final 标记的类、方法 不能被 继承、重写

            static 方法 也不能被覆盖

            因此spring aop不支持了


    2、拦截 static

        1、考虑 用非static方法 转发 static方法

        2、原生AspectJ     ->   ASM  ->  修改源码



2、Spring 循环依赖


    @Lazy                           // A、B类  只需二选一  加上@Lazy 即可
    @Autowired
    private ClassA classA;

    @Lazy
    @Autowired
    private ClassB classB;


    在你注入bean时，在互相依赖的两个Bean上 任意一个加上 @Lazy 注解

    以上方法 能延迟 互相依赖的其中一个 Bean的加载，从而解决 循环依赖 的问题。



3、equals 和 hashcode

      1、相等（相同）的对象 必须具有相等的哈希码（或者散列码）

      2、如果两个对象的hashCode相同，它们并不一定相同


      equals()

          this == obj                地址值


      hashcode()

          作用于 散列表     确定在散列表中的索引位

          一般作用于引用类型 的比较时
              重写equals()      +       自定义重写hashcode()（成员变量值 相加）
------------------------------------------------------------------------------------------------------------------------
并发

    功能：  高效、正确    的并发


    高效：

        多线程

        线程池

        异步




    正确：

        可见性、volatile

        happens-before

        CAS


        管程模型、信号量模型

        条件变量

        synchronized  ->  锁升级

        AQS

            Lock    ->  非阻塞、可中断、可超时

            重入锁

            读写锁

            StampedLock

            同步器 -> CountDownLatch、CyclicBarrier

            Semaphore



        并发容器

        原子类


------------------------------------------------------------------------------------------------------------------------
Collection

    List

    Set

    Map

    Queue

------------------------------------------------------------------------------------------------------------------------
IO

    BIO、NIO、AIO

    多路复用机制（select、poll、epoll）

    线程模型

        线程池 + 阻塞IO

        线程池 + 非阻塞IO             // read、write 同步


    非阻塞IO

        未就绪 -> 不阻塞 -> 轮询获取就绪态   ->  read、write 仍为  同步调用


    真正 - 非阻塞IO

        就绪态 非轮询 ->  异步回调通知 就绪  ->  read、write 异步调用（子线程 执行 -> OS 子线程 实现） ->  回调通知 r/w 结果


    零拷贝     mmap、sendfile   ->  内核 ⇄ 用户


------------------------------------------------------------------------------------------------------------------------
数据结构与算法

    数据结构：存    ->   高效存   ->    空间复杂度

             取    ->  高效查    ->    时间复杂度



    ---------------------------------------------------
    基础数据结构

        数组

        链表


    变体： 数组、链表  的各种组合

        栈

        队列

        树

            二叉树、多叉树

            二叉查找树

            平衡二叉查找树

                红黑树

                堆

                B+树


        跳表


        图（三维、多维）



    ---------------------------------------------------
    算法：

        排序
            插入、冒泡、选择    ->  O(n²)
            快排、归并         ->  O(nlogN)
            桶、计数、基数      ->  O(n)


            分治
                分解 + merge          递归 merge（拆分 + 比较 + 合并） 到不能再分
                分解 + partition      递归 partition（拆分 + 比较） 到不能再分

            分区点
                随机、三数取中

            原地

            稳定


            Arrays.sort

                基础数据类型
                    双轴快排
                        47   ->  插入
                        286  ->  快排    中点、1/7、2/7    =/!=   单/双 轴
                        > 286  ->  趋近有序    -> 归并
                                   无序        -> 快排

                引用类型
                    归并   ->   TimSort    ->  归并的优化版    --> 插入、快排、归并



        递归

        二分查找

            有序

            内存

        哈希

            hash表

            密码

            文件内容完整性     ->  迅雷下载、blockchain


        贪心

        并行



------------------------------------------------------------------------------------------------------------------------
数据库

    功能：存、取

        高效存 -> redo log

            Server层、引擎层、InnoDB 引擎

            写日志快、写磁盘慢、  异步存盘

            redo log

            binlog

            两阶段提交

            crash-safe

            事务

            undo log

            隔离：  视图、版本追溯






        高效取 -> 索引

            高效查 数据结构选取

            二叉树、N叉树、B+树  ->  树高 = IO次数

            索引类型

            索引在B+树中的存储结构

            回表

            索引维护

            索引大小、N的大小、页的大小、树高









    -------------------------------------------------------------------
    首要功能 存储，高效存     ->  redo log        异步存盘

    但是不是简单的存储
    我们还要查，高效查       ->  索引



    1、redo log

        ....



    2、索引

        ....

        除了 数据结构化 方便了查询
        在说到高效检索方面，那就是索引了
        MySQL里面也是用索引来实现高效查
        索引在引擎层实现，由每种引擎各自实现，无统一规范，相同数据结构的索引，实现也完全不同












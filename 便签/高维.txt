1、计算机科学领域 的 任何问题 都可以通过 增加一个间接的中间层 来解决

    系统软件 这个概念其实比较模糊，传统意义上一般将 用于管理计算机本身的软件 称为 系统软件，以 区别 普通的应用程序

    系统软件 可以分成两块：
        一块是 平台性 的
            比如 操作系统内核、驱动程序、运行库 和 数以千计的系统工具
        另外一块是 用于程序开发 的
            比如 编译器、链接器、汇编器 等开发工具和开发库


    计算机 系统软件 体系结构  采用  一种 层 的结构，有人说过一句名言：

        “计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决”

        “Any problem in computer science can be solved by anther layer of indirection”

            这句话 几乎概括了 计算机 系统软件 体系结构 的 设计要点


            整个 体系结构 从上到下都是按照 严格的层次结构 设计的
                不仅是 计算机 系统软件，整个体系都是这样的，
                体系里面的每个组件 比如OS本身，很多应用程序、软件系统、甚至很多硬件结构，都是按照这种层次的结构组织和设计的。


                系统软件 体系结构 中，各种软件 的 位置

                    Applications（应用） :              |       Development Tools（开发工具） :
                        Web Browser                    |            C / C++ Compiler
                        Video Player                   |            Assembler
                        Word Processor                 |           Library Tools
                        Email Client                   |            Debug Tools
                        Image Viewer                   |         Development Libraries

                                                Runtime Library（运行库）        -->  操作系统 API

                                        Operating System Kernel（操作系统内核）   -->  系统调用 API

                                                Hardware（硬件）                 -->  硬件规范 API



            每个层次之间都需要相互通信，既然需要通信就必须有一个通信的协议，我们一般将其称为接口（Interface）
                接口的下面那层是接口的提供者，由它定义接口
                接口的上面那层是接口的使用者，它使用该接口来实现所需要的功能

            在层次体系中，任何一个层都可以被修改或者被替换

            除了硬件和应用程序，其他都是所谓的中间层，每个中间层都是对它下面的那层的包装和扩展

            正是这些中间层的存在，使得 application 和 hardware 之间 保持 相对的独立
                比如 hardware 和 OS 都日新月异地发展，但最初的 80836芯片 和 DOS 设计的软件 在最新的 Multi-core 和 Windows Vista 下还是能够运行的，
                这一方面归功于 hardware 和 OS 本身保持了 向后兼容性，
                另一方面不得不归功于 这种 层次结构 的设计方式。

            最近开始流行的 虚拟机技术 更是在 hardware 和 OS 之间增加了一层虚拟层，使得一个计算机上可以同时运行多个OS，
            这也是层次结构带来的好处，
            在尽可能少改变甚至不改变其他层的情况下，新增加一个层次就可以提供前所未有的功能。

            我们的 软件体系 最上层 就是 application，比如我们平常使用的 web browser、Email、VideoPlayer，ImageViewer等。

            从 整个层次结构 上看，开发工具 与 应用程序 是属于同一个层次的，因为它们都使用一个接口，
            那就是 操作系统 应用程序 编程接口（Application Programming Interface）

                应用程序接口 的 提供者 是 运行库（Runtime library），
                什么样的运行库 提供 什么样的API
                    比如 Linux下的 glibc库 提供POSIX 的API；
                    Windows的 运行库提供Windows API，最常见的32bit Windows提供的API 又被称为 win32

            运行库 使用 OS 提供的 系统调用接口（System call Interface）
            系统调用接口在实现中往往以 软中断（Software Interpt） 的方式提供
                    比如 Linux 使用 0x80号中断 作为 系统调用接口
                    windows 使用 0x2e号中断 作为 系统调用接口



2、没有完美的技术，引入一门新的技术 来解决问题的同时，必定会带来新的问题

    萧伯纳 曾说过：“科学永远是不完整的。它每解决一个问题，又会产生十个问题。”

    不止在 计算机领域，生活中 所有领域 都适用！



3、术业专攻

    一个领域

    不同专业的人，要理解的层级是不同的

        细节是留给深耕该领域的人去相爱相杀的

        因为他们需要在细节上创新，推动革新

    于我而言，需要的是跳出来，站在更高维度看待它

        从理论模型的角度分析

        学习它的思想精髓


    勿舍本逐末！！！



4、所有解决方案均来自人类生活经验

    所谓的设计模式也好、并发编程也好...

    或延伸到其他工程领域...

    或再扩大到人类遇到的所有现有问题...

    无不是来自现实生活中

    多数来自人类自身行为的观察总结，少数来自自然界的启发

    思维方式也基本都是人类思维       ->      当然，这样的好处是，便于大众学习、理解  ->  推广传播


    思考：

        若人类能提出 超脱人类思维方式的理论时

        科技必然带来指数级的飞跃

        由此想到：

            星辰大海、宇宙真理的探索

        福祸相依：

            以非人类思维行事，必然会面临颠覆现有人类文明

            是阵痛式的重生

            还是毁灭式的潘多拉魔盒


5、一切事物都不是孤立存在

    关于技术学习，我们学的是

    思想、模型、方案...

    每一次学习，都是一次 点线面 知识网的加强

    不要孤立的看一个东西


    看一款优秀的中间件：Tomcat、Netty、Kafka、ZooKeeper...

    是去看它

    面临什么、解决(提供)了什么、怎么做的...


    而不是看了篇没头没尾的文章，就自以为学到什么了不起的技术...

    至于具体实现，是次要的，也是最让大多数人迷失、放弃、抓不到重点的

    当你真正理解了它的理论模型

    实现就是很自然的事情，1000个人会有1000种实现方式

    更重要的是，分析实现中遇到的问题，提出方案，方案选取的权衡...


6、看一款优秀的产品

    优秀的产品

    革命性的产品 ———— Linux、Tomcat、MySQL、Redis、iPhone

    适合拿来静心研究

    思想才是精髓

    不要流于形式，研究、模仿外表


7、实践落地 = 产品

    框架、中间件、

    这些都可以看成是

    一个 最佳实践、规范 的落地实现

    表现为

    一款产品（一家独大）

    或多款产品（多个公司 基于同一标准的 不同实现）





1、分布式 观察者模式

    zk      znode值 动态监听

2、分布式锁

    Redis   SETNX KV

    zk      创建znode节点   suc / fail -> 当前znode 作监听（释放 -> 重新尝试获）


3、分布式 事务

    XA(两阶段提交)                       ->  强一致性            数据库 原生跨库事务 解决方案     低性能
    TCC                                 ->  强一致性            编码复杂、难维护
    Saga                                ->  最终一致性          长事务、长流程      遗留老系统/三方服务 无法提供TCC 3个接口的
    本地消息表                           ->  最终一致性
    可靠消息最终一致性                    ->  最终一致性           RokcetMQ           互联网大厂方案
    最大努力通知


4、接口幂等

    redis           set kv

    zk              create znode

5、分布式 session

    redis

    JWT token

6、限流

    算法：
        1、计数器           瞬时峰值问题

        2、滑动窗口         对计数器方式的改进, 增加一个 时间粒度 的度量单位      ==>   1min  ->  6等分

        3、漏桶            规定固定容量的桶, 有水进入, 有水流出. 对于流进的水我们无法估计进来的数量、速度, 对于流出的水我们可以控制速度.

        4、令牌桶          规定固定容量的桶, token 以固定速度往桶内填充, 当桶满时 token 不会被继续放入, 每过来一个请求把 token 从桶中移除, 如果桶中没有 token 不能请求


    实现：
        Guava、spring cloud gateway、sentinel


1、计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决

    系统软件 这个概念其实比较模糊，传统意义上一般将 用于管理计算机本身的软件 称为 系统软件，以 区别 普通的应用程序

    系统软件 可以分成两块：
        一块是 平台性 的
            比如 操作系统内核、驱动程序、运行库 和 数以千计的系统工具
        另外一块是 用于程序开发 的
            比如 编译器、链接器、汇编器 等开发工具和开发库


    计算机 系统软件 体系结构  采用  一种 层 的结构，有人说过一句名言：

        “计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决”

        “Any problem in computer science can be solved by anther layer of indirection”

            这句话 几乎概括了 计算机 系统软件 体系结构 的 设计要点

            整个 体系结构 从上到下都是按照 严格的层次结构 设计的
                不仅是 计算机 系统软件，整个体系都是这样的，
                体系里面的每个组件 比如OS本身，很多应用程序、软件系统、甚至很多硬件结构，都是按照这种层次的结构组织和设计的。

                系统软件体系结构中，各种软件的位置
                    ...

            每个层次之间都需要相互通信，既然需要通信就必须有一个通信的协议，我们一般将其称为接口（Interface）
                接口的下面那层是接口的提供者，由它定义接口
                接口的上面那层是接口的使用者，它使用该接口来实现所需要的功能

            在层次体系中，任何一个层都可以被修改或者被替换

            除了硬件和应用程序，其他都是所谓的中间层，每个中间层都是对它下面的那层的包装和扩展

            正是这些中间层的存在，使得 application 和 hardware 之间 保持 相对的独立
                比如 hardware 和 OS 都日新月异地发展，但最初的 80836芯片 和 DOS 设计的软件 在最新的 Multi-core 和 Windows Vista 下还是能够运行的，
                这一方面归功于 hardware 和 OS 本身保持了 向后兼容性，
                另一方面不得不归功于 这种 层次结构 的设计方式。

            最近开始流行的 虚拟机技术 更是在 hardware 和 OS 之间增加了一层虚拟层，使得一个计算机上可以同时运行多个OS，
            这也是层次结构带来的好处，
            在尽可能少改变甚至不改变其他层的情况下，新增加一个层次就可以提供前所未有的功能。

            我们的 软件体系 最上层 就是 application，比如我们平常使用的 web browser、Email、VideoPlayer，ImageViewer等。

            从 整个层次结构 上看，开发工具 与 应用程序 是属于同一个层次的，因为它们都使用一个接口，
            那就是 操作系统 应用程序 编程接口（Application Programming Interface）

                应用程序接口 的 提供者 是 运行库（Runtime library），
                什么样的运行库 提供 什么样的API
                    比如 Linux下的 glibc库 提供POSIX 的API；
                    Windows的 运行库提供Windows API，最常见的32bit Windows提供的API 又被称为 win32

            运行库 使用 OS 提供的 系统调用接口（System call Interface）
            系统调用接口在实现中往往以 软中断（Software Interpt） 的方式提供
                    比如 Linux 使用 0x80号中断 作为 系统调用接口
                    windows 使用 0x2e号中断 作为 系统调用接口
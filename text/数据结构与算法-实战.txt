1、剖析Redis常用数据类型对应的数据结构

    Redis 中，键的数据类型是字符串，但是值的数据类型有很多，常用的数据类型是：字符串、列表、字典、集合、有序集合


    1、字符串（string）

        值是一个字符串

        实现：

            散列表

                值为字符串的键值对，是通过hash实现的，将 键转换成index 存储在 hash表 中


    2、列表（list）

        支持存储 一组数据

        两种实现：

            1、压缩列表（ziplist）

                当列表中存储的 数据量比较小 时，可以采用 压缩列表 的方式实现

                    需要同时满足下面两个条件：
                        1、列表中保存的单个数据（可能是字符串类型的）小于 64 字节
                        2、列表中数据个数少于 512 个

            2、双向循环链表


        关于压缩列表
            1、它并不是基础数据结构，而是 Redis 自己设计的一种数据存储结构
            2、类似数组，通过一片 连续的内存空间 来存储数据
            3、跟数组不同的是 它允许 存储的数据大小不同


        压缩列表中的“压缩”如何理解？

            “压缩”：就是节省内存，之所以说节省内存，是 相较于数组 的存储思路而言的

                数组要求每个元素的大小相同，如果要存储不同长度的字符串，就需要用最大长度的字符串大小作为元素的大小
                但 压缩数组 允许 不同的存储空间

            1、压缩列表这种存储结构，另一方面可以支持不同类型数据的存储
            2、数据存储在一片连续的内存空间，通过键来获取值为列表类型的数据，读取的效率也非常高



        压缩列表 不支持 随机访问
            有点类似链表，但是比较省存储空间
            Redis一般都是通过key获取整个value的值，也就是 整个压缩列表 的数据，并不需要随机访问


        利用 CPU 缓存
            在数据量少时会采用ziplist数据结构，由于数据量少，可以利用CPU缓存（L2 缓存）


    3、字典（hash）

        用来存储 一组 数据对，每个 数据对 又包含 键值 两部分


        两种实现：

            1、压缩列表

                同样，只有当存储的数据量比较小的情况下，Redis 才使用压缩列表来实现字典类型

                    具体需要满足两个条件：
                        1、字典中保存的键和值的大小都要小于 64 字节
                        2、字典中键值对的个数要小于 512 个

            2、散列表

                当不能同时满足上面两个条件的时候，Redis 就使用散列表来实现字典类型
                    * Redis 使用 MurmurHash2 这种运行速度快、随机性好的哈希算法作为哈希函数
                    * 对于 哈希冲突，Redis 使用 链表法 来解决
                    * 除此之外，Redis 还支持散列表的 动态扩容、缩容

                        当数据动态增加，装载因子会不停地变大，为了避免散列表性能的下降：
                            当装载因子大于 1 的时候，Redis 会触发扩容，将散列表扩大为原来大小的 2 倍左右（具体值需要计算才能得到）
                            当数据动态减少之后，为了节省内存，当装载因子小于 0.1 的时候，Redis 就会触发缩容，缩小为字典中数据个数的大约 2 倍大小（这个值也是计算得到的）

                        扩容缩容要做大量的 数据搬移 和 哈希值的重新计算，比较耗时。
                        针对这个问题，Redis 使用 渐进式 扩容缩容策略：
                            将数据的搬移 分批 进行，避免了大量数据一次性搬移导致的服务停顿


    4、集合（set）

        用来存储 一组不重复的数据

        两种实现：

            1、有序数组

                Redis 若采用有序数组，要同时满足下面这样两个条件：
                    1、存储的数据都是 整数
                    2、存储的数据元素个数不超过 512 个

            2、散列表


    5、有序集合（sortedset）

        用来存储 一组数据，并且每个数据会 附带一个得分。通过得分的大小，将数据组织成跳表这样的数据结构，以支持快速地按照得分值、得分区间获取数据


        实现：

            1、压缩列表

                当数据量比较小的时候，Redis 可用压缩列表来实现有序集合

                使用的前提有两个：

                    1、所有数据的大小都要 小于 64 字节
                    2、元素个数要 小于 128 个

            2、跳表



    数据结构持久化

        尽管 Redis 经常会被用作内存数据库，但它也支持将内存中的数据存储到硬盘中
        当机器断电的时，存储在 Redis 中的数据不会丢失

        Redis 的数据格式由“键”和“值”两部分组成
        而“值”又支持很多数据类型，像字典、集合等类型，底层用到了散列表，散列表中有 指针 的概念，而 指针 指向的是 内存中的存储地址


            Redis 是如何将一个跟具体内存地址有关的数据结构存储到磁盘中的？

                1、Redis 遇到的这个问题被称为数据结构的持久化问题，或者对象的持久化问题
                2、将数据结构持久化到硬盘主要有两种解决思路：

                    1、第一种是清除原有的存储结构，只将数据存储到磁盘中
                        （1）当需要从磁盘还原数据到内存时，再重新将数据组织成原来的数据结构。Redis 采用的就是这种持久化思路。
                        （2）这种方式有一定的弊端：数据从硬盘还原到内存的过程，会耗用比较多的时间

                    2、第二种方式是保留原来的存储格式，将数据按照原有的格式存储在磁盘中

                        如 散列表
                            我们可以将散列表的大小、每个数据被散列到的槽的编号等信息，都保存在磁盘中
                            有了这些信息，我们从磁盘中将数据还原到内存中的时候，就可以 避免 重新计算哈希值
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_bebopze_jdk_jvm_jni_NativeC */

#ifndef _Included_com_bebopze_jdk_jvm_jni_NativeC
#define _Included_com_bebopze_jdk_jvm_jni_NativeC
#ifdef __cplusplus
extern "C" {
#endif

// native 方法的链接


// ---------------------------------------------------
// 第一种是让 Java 虚拟机自动查找符合 默认命名规范的 C 函数，并且链接起来。


/*
 * Class:     com_bebopze_jdk_jvm_jni_NativeC
 * Method:    hashcode
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_bebopze_jdk_jvm_jni_NativeC_hashcode
  (JNIEnv *, jclass);

/*
 * Class:     com_bebopze_jdk_jvm_jni_NativeC
 * Method:    hello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bebopze_jdk_jvm_jni_NativeC_hello__
  (JNIEnv *, jobject);

/*
 * Class:     com_bebopze_jdk_jvm_jni_NativeC
 * Method:    hello
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_bebopze_jdk_jvm_jni_NativeC_hello__Ljava_lang_String_2
  (JNIEnv *, jobject, jstring);



// ---------------------------------------------------
// 第二种链接方式则是在 C 代码中 主动链接


    // 注：Object类的registerNatives方法的实现位于java.base模块里的C代码中
    static JNINativeMethod methods[] = {
        {"hashCode",    "()I",                    (void *)&JVM_IHashCode},
        {"wait",        "(J)V",                   (void *)&JVM_MonitorWait},
        {"notify",      "()V",                    (void *)&JVM_MonitorNotify},
        {"notifyAll",   "()V",                    (void *)&JVM_MonitorNotifyAll},
        {"clone",       "()Ljava/lang/Object;",   (void *)&JVM_Clone},
    };



/*
 * Class:     com_bebopze_jdk_jvm_jni_NativeC
 * Method:    registerNatives
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bebopze_jdk_jvm_jni_NativeC_registerNatives
  (JNIEnv *, jclass)
{
    (*env) -> RegisterNatives(env, cls, methods, sizeof(methods)/sizeof(methods[0]));
}



#ifdef __cplusplus
}
#endif
#endif

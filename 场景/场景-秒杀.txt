========================================================================================================================
秒杀系统架构设计都有哪些关键点？
========================================================================================================================

    稳（高可用）、准（一致性）、快（高性能）

------------
面临的问题：

    高可用

        就是整个系统架构要满足高可用，流量符合预期时肯定要稳定，就是超出预期时也同样不能掉链子，
        你要保证秒杀活动顺利完成，即秒杀商品顺利地卖出去，这个是最基本的前提。


    一致性

        秒杀 10 台 iPhone，那就只能成交 10 台，多一台少一台都不行。
        一旦库存不对，那平台就要承担损失，所以“准”就是要求保证数据的一致性。


    高性能

        系统的性能要足够高，否则你怎么支撑这么大的流量呢？
        不光是服务端要做极致的性能优化，而且在整个请求链路上都要做协同的优化，每个地方快一点，整个系统就完美了。



------------
怎么办（切入点）

    高性能（高并发  ->  并发读/写）

        秒杀涉及大量的 并发读 和 并发写，因此支持 高并发访问 这点非常关键

        我们将从 4个方面 重点优化：

            1、设计数据的动静分离方案
            2、热点的发现与隔离
            3、请求的削峰与分层过滤
            4、服务端的极致优化这


    一致性（并发读写的数据一致性   ->   减库存）

        秒杀中 商品减库存 的实现方式同样关键

            有限数量的商品 在同一时刻 被很多倍的请求 同时来减库存

            减库存又分为 “拍下减库存”、“付款减库存”、“预扣” 等几种

            在 大并发更新的过程中 都要保证数据的准确性，其难度可想而知


    高可用（超出预估流量   ->   兜底方案）

        虽然我介绍了很多极致的优化思路，但现实中总难免出现一些我们考虑不到的情况

        所以要保证系统的高可用和正确性，我们还要设计一个 PlanB 来兜底

        以便在最坏情况发生时仍然能够从容应对




========================================================================================================================
设计秒杀系统时应该注意的5个架构原则
========================================================================================================================

秒杀：

    同一个时刻 有大量的请求 争抢 购买同一个商品 并完成交易的过程

    技术行话

        就是 大量的并发读 和 并发写



----------------------------------
秒杀系统 的本质

    就是一个 满足 大并发、高性能、高可用 的 分布式系统


-------------------------------------------------------------------------------------------------
构建一个 超大流量并发读写、高性能、高可用 的系统，有哪些要素需要考虑？

4要
    1、数据    要尽量少            ->   减少cpu消耗
    2、请求数  要尽量少            ->   减少加载时间
    3、路径    要尽量短            ->   减少节点消耗
    4、依赖    要尽量少            ->   减少加载时间

1不要
    5、不要有  单点               ->   要有备份



-------------------------------------
高并发系统的几大方向
1.请求数据尽量少，从而减少cpu消耗
2.访问路径尽量短，减少节点消耗
3.强依赖尽量少，减少加载时间
4.不要有单点，要有备份
5.减少额外请求，减少加载时间




平衡的艺术
    越追求极致性能，系统定制开发就会越多，同时系统的通用性也就会越差。









========================================================================================================================


========================================================================================================================

之前开发过一个秒杀系统：
    1. 前端限流，5 秒内只提交一个请求，静态资源存放于 CDN。
    2. 后端 redis 对 uid 限流，同样 5 秒内提交一个请求。
    3. 请求保存队列，队列长度为库存 2 倍。为什么是 2 倍呢？拍脑门决定的，防止前面预订失败，后面补上。
    4. 队列满后，后续请求直接返回秒杀结束。
    5. 消费线程消费队列内容，下订单，直接操作 MySQL 扣库存。

    可惜的是用户量不大，没能很好检验这个系统，因此不了解系统存在哪些问题。

    当时也没想到支付超时后，剩余的库存如何处理，导致最后剩余商品没卖出去，囧…




------------------------------------------------------------------------------------------------------------------------
1 .本地cache用什么实现好呢？
2. 通过什么方式往本地cache 写数据呢？
3. 秒杀系统的及时性非常高，把库存写进cache ，怎么及时更新呢？

    1.本地cache一般就是用内存实现，用java集合类型就行
    2.用订阅的方式，在初始化时加载到内存
    3.有两种方法
        一是定时更新取3秒
        二是主动更新，数据库字段更新后发消息更新缓存，这个需要用到一个组件阿里叫metaq就是就是数据库字段更新会产生一条消息
        另外cache里库存不需要100%和数据库一致，这个在后面的文章也有介绍




------------------------------------------------------------------------------------------------------------------------
希望老师可以分别从1W QPS，10W QPS ，100WQPS在架构升级前遇到的性能瓶颈做为讲解入口点，
为什么这样设计之后就能解决问题的方式，为什么切分点是1万，10万和100万，瓶颈的分析方式等等，感觉效果更好，
否则看到一堆架构，但并不清楚为什么要这样做还是很难平移到自己的系统设计中，一点拙见，希望老师能够解惑

    架构升级的逻辑要具体问题具体分析的
    例如秒杀的场景来说，不同QPS量级下瓶颈也会不一样，
        10w级别可能瓶颈就在数据读取上，通过增加缓存一般就能解决，
        如果要到100w那么，可能服务端的网络可能都是瓶颈，所以要把大部分的静态数据放到cdn上甚至缓存在浏览器里
    所以要做架构升级，还是主要要分析在预估的QPS下，整个系统的瓶颈会在什么地方，要针对这起瓶颈来重新设计架构方案


------------------------------------------------------------------------------------------------------------------------
库存不会放在localcache，localcache只放静态数据。
库存是放在独立的缓存系统里，如redis，库存是采用主动失效的方式来失效缓存


------------------------------------------------------------------------------------------------------------------------
老师你好，减库存操作，update count = count-1 where count>0，这种做法不会多卖吧？

    对

------------------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------------------